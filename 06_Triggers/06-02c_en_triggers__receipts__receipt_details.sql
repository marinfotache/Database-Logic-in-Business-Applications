/*

This script works with `sales` database that was created by launching (in Oracle SQL Developer) seven previous scripts:

https://github.com/marinfotache/Database-Logic-in-Business-Applications/blob/master/06_Triggers/06-00-2_fixed_DDL_script_sales_2015.sql

https://github.com/marinfotache/Database-Logic-in-Business-Applications/blob/master/06_Triggers/06-00-3_add_constraints_sales_2015.sql

https://github.com/marinfotache/Database-Logic-in-Business-Applications/blob/master/06_Triggers/06-01a_en_sequences.sql

https://github.com/marinfotache/Database-Logic-in-Business-Applications/blob/master/06_Triggers/06-01b_en_data_cleaning__surrogate_keys.sql

https://github.com/marinfotache/Database-Logic-in-Business-Applications/blob/master/06_Triggers/06-01c_en_cascade_updates.sql

https://github.com/marinfotache/Database-Logic-in-Business-Applications/blob/master/06_Triggers/06-02a_en_triggers__invoices.sql

https://github.com/marinfotache/Database-Logic-in-Business-Applications/blob/master/06_Triggers/06-02b_en_triggers__invoice_details.sql

https://github.com/marinfotache/Database-Logic-in-Business-Applications/blob/master/06_Triggers/06-02c_en_triggers__receipts__receipt_details.sql


See also the `sales` database schema and denormalized attributes in presentation:

https://github.com/marinfotache/Database-Logic-in-Business-Applications/blob/master/06_Triggers/06-02_en_Triggers%20-%20part%202.pptx

*/

--==========================================================================================
--    Triggers for table RECEIPTS for dealing with denormalized attributes/tables
--==========================================================================================


----------------------------------------------------------------------------------------
-- first, we create a package called "pac_sales_4" with  
--  ...
----------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE pac_sales_4
AS
    FUNCTION f_receipt_date (receipt_id_ receipts.receipt_id%TYPE)
        RETURN receipts.receipt_date%TYPE ; 
    FUNCTION f_cust_id (invoice_id_ invoices.invoice_id%TYPE)
        RETURN customers.cust_id%TYPE ; 
    
END ;
/

--------------------------------------------
CREATE OR REPLACE PACKAGE BODY pac_sales_4 
AS
--------------------------------------------
FUNCTION f_receipt_date (receipt_id_ receipts.receipt_id%TYPE)
        RETURN receipts.receipt_date%TYPE 
IS
    v_receipt_date receipts.receipt_date%TYPE ;
BEGIN
    SELECT receipt_date INTO v_receipt_date
        FROM receipts WHERE receipt_id = receipt_id_ ;
        
    RETURN v_receipt_date ;    
END f_receipt_date;         

--------------------------------------------
FUNCTION f_cust_id (invoice_id_ invoices.invoice_id%TYPE)
        RETURN customers.cust_id%TYPE 
IS
    v_cust_id customers.cust_id%TYPE ;
BEGIN
    SELECT cust_id INTO v_cust_id
        FROM invoices WHERE invoice_id = invoice_id_ ;
        
    RETURN v_cust_id ;    
END f_cust_id ;         


END ;
/

--==========================================================================================
--    					I. Triggers for INSERTs in table RECEIPTS 
--==========================================================================================

----------------------------------------------------------------------------------------
--  the insert trigger - "trg_receipts_ins_upd_bef_row" - 
--      was created in script 06-01a_en_...

-- we delete it and create separated triggers for insert, update and delete
DROP TRIGGER trg_receipts_ins_upd_bef_row ;


/*
------------------------------------------------------------------------------------------
-- Tasks for the INSERT trigger:
-- 		* manage the surrogate key (invoice_id) - BEFORE ROW
-- 		* update denormalized tables "months" and "customer_monthly_stats"
------------------------------------------------------------------------------------------
*/


--==========================================================================================
--    					I.a Trigger for INSERTs in table RECEIPTS - BEFORE - ROW

--  we place here all the commands for changing current inserted row values
CREATE OR REPLACE TRIGGER trg_receipts_ins1
	BEFORE INSERT ON receipts FOR EACH ROW
DECLARE	
    v_receipt_id receipts.receipt_id%TYPE ;
    v_dummy INTEGER ;
BEGIN 
    -- we'll use a block inside the trigger that will catch any primary key violation
    BEGIN
        LOOP -- keep looping until the value generated by the sequence was not already
             -- assigned to the surrogate key      
            v_receipt_id := seq__receipt_id.NextVal  ;
            SELECT 1 INTO v_dummy FROM receipts WHERE receipt_id = v_receipt_id ;  
        END LOOP ;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            :NEW.receipt_id := seq__receipt_id.CurrVal  ;
    END ;
    -- here the nested anonymous block ends
        
    -- a newly inserted receipt has...
    :NEW.amount_paid := 0 ;
END ;
/

--==========================================================================================
--    			   I.b Trigger for INSERTs in table RECEIPTS - AFTER - ROW
--  Note: Remember that as an invoice can be paid in another month than it was issued


CREATE OR REPLACE TRIGGER trg_receipts_ins2
	AFTER INSERT ON receipts FOR EACH ROW
BEGIN 	
	-- we test if for receipts's customer there is a record in the current month
	--   in table "customer_monthly_stats"; if not, we'll insert one record
	--   ..., but, before that, we'll check if table "months" has a record for the current month
	IF pac_sales_2.f_months (EXTRACT (YEAR FROM :NEW.receipt_date), 
	        EXTRACT (MONTH FROM :NEW.receipt_date)) = FALSE THEN
	    INSERT INTO months VALUES (EXTRACT (YEAR FROM :NEW.receipt_date), 
	        EXTRACT (MONTH FROM :NEW.receipt_date), 0, 0, 0, 0) ;
 	END IF ;	

END ;
/


DELETE FROM receipt_details ;
DELETE FROM receipts ;

INSERT INTO receipts (receipt_date, receipt_docum_type, receipt_docum_number,receipt_docum_date) 
    VALUES (DATE'2013-08-15', 'OP', '111', DATE'2013-08-10' ) ;
INSERT INTO receipts (receipt_date, receipt_docum_type, receipt_docum_number,receipt_docum_date) 
    VALUES (DATE'2013-08-15', 'CHIT', '222', DATE'2013-08-15') ;
INSERT INTO receipts (receipt_date, receipt_docum_type, receipt_docum_number,receipt_docum_date) 
    VALUES (DATE'2013-08-16', 'OP', '333', DATE'2013-08-12') ;
INSERT INTO receipts (receipt_date, receipt_docum_type, receipt_docum_number,receipt_docum_date) 
    VALUES (DATE'2013-08-17', 'CEC', '444', DATE'2013-08-14') ;
INSERT INTO receipts (receipt_date, receipt_docum_type, receipt_docum_number,receipt_docum_date) 
    VALUES (DATE'2013-08-17', 'OP', '555', DATE'2013-08-15') ;
INSERT INTO receipts (receipt_date, receipt_docum_type, receipt_docum_number,receipt_docum_date) 
    VALUES (DATE'2013-08-18', 'OP', '666', DATE'2013-08-15') ;
INSERT INTO receipts (receipt_date, receipt_docum_type, receipt_docum_number,receipt_docum_date) 
    VALUES (DATE'2013-08-20', 'OP', '777', DATE'2013-08-17') ;

COMMIT ;


--==========================================================================================
--    					II. Triggers for UPDATEs in table RECEIPTS 
--==========================================================================================

------------------------------------------------------------------------------------------
-- Tasks for the UPDATE triggers of table "receipts":
-- * update "customers.current_balance"
-- * update denormalized tables "months" and "customer_monthly_stats"

-- * when "receipt_date" is changed, check it the new month is different from the older one;
--     if so, in table "months":
--			* decrease "received_total" with the older "amount_paid" for the older month 
--			* increase "received_total" with the newer "amount_paid" for the newer month; 
--				(do not forget to check there is a record in "months" for the new month)  
--    if the month remains unchanged, just update "received_total" in table "months"
        
------------------------------------------------------------------------------------------
--  UPDATE trigger for "receipts": AFTER-ROW
CREATE OR REPLACE TRIGGER trg_receipts_upd
	AFTER UPDATE ON receipts FOR EACH ROW
BEGIN 
    -- if the receipt month was changed....
    IF EXTRACT(YEAR FROM :NEW.receipt_date) <> EXTRACT(YEAR FROM :OLD.receipt_date) OR
			EXTRACT(MONTH FROM :NEW.receipt_date) <> EXTRACT(MONTH FROM :OLD.receipt_date) THEN
        -- ... then in table "months" decrease "received_total" with ":OLD.amount_paid"
        UPDATE months
        SET received_total = received_total - :OLD.amount_paid
        WHERE year = EXTRACT(YEAR FROM :OLD.receipt_date) 
            AND month =  EXTRACT(MONTH FROM :OLD.receipt_date) ;

        -- ... then also in table "months" increase "received_total" 
        --     with :NEW.amount_received
        
    	--   ..., but, before that, we'll check if table "months" has a record for the current month
	    IF pac_sales_2.f_months (EXTRACT (YEAR FROM :NEW.receipt_date), 
	            EXTRACT (MONTH FROM :NEW.receipt_date)) = FALSE THEN
	        INSERT INTO months VALUES (EXTRACT (YEAR FROM :NEW.receipt_date), 
	            EXTRACT (MONTH FROM :NEW.receipt_date), 0, 0, 0, 0) ;
 	    END IF ;	

        -- now, the update
        UPDATE months
        SET received_total = received_total + :NEW.amount_paid
        WHERE year = EXTRACT(YEAR FROM :NEW.receipt_date) 
            AND month =  EXTRACT(MONTH FROM :NEW.receipt_date) ;


        -- as a payment is made by only one customer, we find its id, and update
        --   table "customer_monthly_stats"
        FOR rec_cust IN (SELECT DISTINCT cust_id FROM invoices WHERE invoice_id
            IN (SELECT invoice_id FROM receipt_details WHERE receipt_id = :NEW.receipt_id)) LOOP
        
                -- ... first decrease "customer_monthly_stats.received" for the old month
                UPDATE customer_monthly_stats
                SET received = received - :OLD.amount_paid
                WHERE year = EXTRACT(YEAR FROM :OLD.receipt_date) AND 
                    month =  EXTRACT(MONTH FROM :OLD.receipt_date) AND
                        cust_id = rec_cust.cust_id ;
 
                -- ... then increase "customer_monthly_stats.received" for the new month
        	    IF pac_sales_2.f_customer_monthly_stats (rec_cust.cust_id, 
	                    EXTRACT(YEAR FROM :NEW.receipt_date), EXTRACT(MONTH FROM :NEW.receipt_date)) = FALSE THEN
	                INSERT INTO customer_monthly_stats VALUES (rec_cust.cust_id, 
	                    EXTRACT (YEAR FROM :NEW.receipt_date), EXTRACT (MONTH FROM :NEW.receipt_date),
	                        0, 0, 0, :NEW.amount_paid) ;
 	            ELSE	        
                    UPDATE customer_monthly_stats
                    SET received = received + :NEW.amount_paid
                    WHERE year = EXTRACT(YEAR FROM :NEW.receipt_date) AND 
                        month =  EXTRACT(MONTH FROM :NEW.receipt_date) AND
                            cust_id = rec_cust.cust_id ;
 	            END IF ;	    
         END LOOP ;
                              
    ELSE
        -- here, the receipt month has not been changed, so the updates
        --   will be done with the "receipt_details" triggers
        NULL ;
    END IF ;    

END ;
/

---------------------------------------------------
--                  to be tested during lectures 




------------------------------------------------------------------------------------------
-- Tasks for the DELETE trigger:
-- * update attribute "customers.current_balance"
-- * update denormalized tables "months" and "customer_monthly_stats"
------------------------------------------------------------------------------------------
-- 1. delete trigger for "receipts": BEFORE-ROW
--  we do not need such a trigger (at least, for the moment)

-- 2. delete trigger for "receipts": AFTER-ROW
--   here we update the denormalized attributes/tables
--  we'll update all the denormalized attributes with the triggers of table "receipt_details"

-- DROP TRIGGER trg_receipts_del ;


------------------------------------------------------------------------------------------


--==========================================================================================
--     Triggers for table "receipt_details" for dealing with denormalized attributes/tables
--==========================================================================================
    
------------------------------------------------------------------------------------------
-- Tasks for INSERT trigger of table "receipt_details":
-- * import "receipt_date" from "receipts" (BEFORE-ROW)
-- * update "amount_paid" in table "receipts"
-- * update "amount_received" in table "invoices"
-- * update "received_total" in table "months"
-- * update "current_balance" in table "customers"
-- * update "received" in table "customer_monthly_stats"

------------------------------------------------------------------------------------------
--  trigger BEFORE-ROW trigger for INSERT in table "receipt_details" will just 
--   import "receipt_date" from "receipts"
CREATE OR REPLACE TRIGGER trg_receipt_details_ins1
	BEFORE INSERT ON receipt_details FOR EACH ROW
BEGIN 
    :NEW.receipt_date := pac_sales_4.f_receipt_date(:NEW.receipt_id) ;
END ;
/

------------------------------------------------------------------------------------------
-- insert AFTER-ROW trigger for "receipt_details"  
--   will update the denormalized attributes/tables
CREATE OR REPLACE TRIGGER trg_receipt_details_ins2
	AFTER INSERT ON receipt_details FOR EACH ROW
BEGIN 

    -- increase "amount_paid" in table "receipts"
    UPDATE receipts
    SET amount_paid = amount_paid + :NEW.amount
    WHERE receipt_id = :NEW.receipt_id  ;

    -- increase "amount_received" in table "invoices"
    UPDATE invoices
    SET amount_received = amount_received + :NEW.amount
    WHERE invoice_id = :NEW.invoice_id  ;
    
    -- increase "received_total" in table "months"
	IF pac_sales_2.f_months (EXTRACT (YEAR FROM :NEW.receipt_date), 
	        EXTRACT (MONTH FROM :NEW.receipt_date) ) = FALSE THEN
	    INSERT INTO months VALUES (EXTRACT (YEAR FROM :NEW.receipt_date), 
	        EXTRACT (MONTH FROM :NEW.receipt_date), 0, 0, 0, :NEW.amount) ;
 	ELSE	
        UPDATE months
        SET received_total = received_total + :NEW.amount
	    WHERE year = EXTRACT (YEAR FROM :NEW.receipt_date) AND
	        month = EXTRACT (MONTH FROM :NEW.receipt_date) ;  
	END IF ;                   
    
    
    -- update "current_balance" in table "customers"
    /* there is no need, as the customer balance will be updated by the triggers of "invoices"
    
    UPDATE customers
    SET current_balance = current_balance - :NEW.amount
	WHERE cust_id = pac_sales_4.f_cust_id(:NEW.invoice_id) ;  

    */
    
    -- update table "customer_monthly_stats"
	IF pac_sales_2.f_customer_monthly_stats (pac_sales_4.f_cust_id(:NEW.invoice_id), 
	        EXTRACT (YEAR FROM :NEW.receipt_date), 
 	        EXTRACT (MONTH FROM :NEW.receipt_date)) = FALSE THEN

	    INSERT INTO customer_monthly_stats VALUES (pac_sales_4.f_cust_id(:NEW.invoice_id), 
	        EXTRACT (YEAR FROM :NEW.receipt_date), 
	        EXTRACT (MONTH FROM :NEW.receipt_date),
	        0, 0, 0, :NEW.amount) ;
	ELSE
	    UPDATE customer_monthly_stats
	    SET received = received + :NEW.amount
	    WHERE year = EXTRACT (YEAR FROM :NEW.receipt_date) AND
	        month = EXTRACT (MONTH FROM :NEW.receipt_date) AND
	        cust_id =  pac_sales_4.f_cust_id(:NEW.invoice_id) ;       
 	END IF ;	
            
END ;
/



----------------------------------------------------------------------------------------
-- inserts 

INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='111' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 1111), 
        4527400) ;
INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='111' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 1115), 
        155400) ;
INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='111' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 1117), 
        100000) ;

INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='222' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 1112), 
        129488) ;
INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='222' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 2111), 
        150500) ;

INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='333' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 1117), 
        129000) ;
INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='333' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 1118), 
        209940) ;
INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='333' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 1120), 
        100352) ;
INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='333' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 2111), 
        4628328) ;

INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='444' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 1119), 
        6015408) ;

INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='555' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 1117), 
        800) ;
INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='555' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 2115), 
        113960) ;

INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='666' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 1113), 
        109200) ;
INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='666' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 2113), 
        131040) ;

INSERT INTO receipt_details (receipt_id, invoice_id, amount) 
    VALUES ((SELECT receipt_id FROM receipts WHERE receipt_docum_number='777' ), 
        (SELECT invoice_id FROM invoices WHERE invoice_number = 1114), 6272728) ;


----------------------------------------------------------------------------------------
--              check the triggers with a couple of queries
----------------------------------------------------------------------------------------

-- check synchronization "invoices"-"invoice_details"-"receipt_details"
WITH check_invoices AS
    (SELECT i.invoice_id, i.invoice_number, i.invoice_date, i.invoice_amount, 
        (SELECT COALESCE(SUM(quantity * unit_price + row_vat), 0) 
            FROM invoice_details WHERE invoice_id = i.invoice_id) AS checked_amount ,
        i.amount_received, 
        (SELECT COALESCE(SUM(amount), 0) 
            FROM receipt_details WHERE invoice_id = i.invoice_id) AS checked_received
    FROM invoices i    )
SELECT c_i.*, 
  CASE WHEN invoice_amount <> checked_amount OR amount_received <> checked_received 
    THEN 'Problem!' ELSE ' ' END AS Problems
FROM check_invoices c_i   
ORDER BY 1 ;
         
-- check if the current balance account for each customer is correct
WITH check_cust AS (
    SELECT c.cust_id, cust_name, current_balance, 
        (SELECT COALESCE(SUM(invoice_amount),0) AS sales FROM invoices WHERE cust_id = c.cust_id) AS sales,
        (SELECT COALESCE(SUM(amount),0) FROM receipt_details rd INNER JOIN
                        invoices i ON rd.invoice_id = i.invoice_id   
                WHERE cust_id = c.cust_id) AS paid,
    (SELECT COALESCE(SUM(invoice_amount),0) AS sales FROM invoices WHERE cust_id = c.cust_id) -
        (SELECT COALESCE(SUM(amount),0) FROM receipt_details rd INNER JOIN
                        invoices i ON rd.invoice_id = i.invoice_id   
                WHERE cust_id = c.cust_id) AS diff
    FROM customers c) 
SELECT c_c.*, 
  CASE WHEN current_balance <> diff
    THEN 'Problem!' ELSE ' ' END AS Problems
FROM check_cust c_c   
ORDER BY 1 ;


-- check the values in table "months"
WITH check_months AS (
    SELECT m.year, m.month, sales_total, 
        (SELECT COALESCE(SUM(invoice_amount),0) 
        FROM invoices 
        WHERE EXTRACT (YEAR FROM invoice_date) = m.year AND
            EXTRACT (MONTH FROM invoice_date) = m.month) AS sales_checked,
        received_total,
        (SELECT COALESCE(SUM(amount),0) FROM receipt_details 
        WHERE EXTRACT (YEAR FROM receipt_date) = m.year AND
            EXTRACT (MONTH FROM receipt_date) = m.month) AS received_checked
    FROM months m)
SELECT c_m.*, 
  CASE WHEN sales_total <> sales_checked OR received_total <> received_checked 
    THEN 'Problem!' ELSE ' ' END AS Problems
FROM check_months c_m 
ORDER BY 1, 2, 3;  
     

-- check the values in table "customer_monthly_stats"
WITH check_c_m_s AS (
    SELECT c_m_s.year, c_m_s.month, cust_id, sales, 
        (SELECT COALESCE(SUM(invoice_amount),0) 
        FROM invoices 
        WHERE EXTRACT (YEAR FROM invoice_date) = c_m_s.year AND
            EXTRACT (MONTH FROM invoice_date) = c_m_s.month AND
            cust_id = c_m_s.cust_id) AS sales_checked,
        received,
        (SELECT COALESCE(SUM(amount),0) FROM receipt_details r_d
            INNER JOIN invoices i ON r_d.invoice_id = i.invoice_id
        WHERE EXTRACT (YEAR FROM receipt_date) = c_m_s.year AND
            EXTRACT (MONTH FROM receipt_date) = c_m_s.month AND
            cust_id = c_m_s.cust_id) AS received_checked
    FROM customer_monthly_stats c_m_s)
SELECT c_c_m_s.*, 
  CASE WHEN sales <> sales_checked OR received <> received_checked 
    THEN 'Problem!' ELSE ' ' END AS Problems
FROM check_c_m_s c_c_m_s  
ORDER BY 1, 2, 3 ;
     

-- check the values in table "product_monthly_stats"
WITH check_p_m_s AS (
    SELECT p_m_s.year, p_m_s.month, product_id, sales, 
        (SELECT COALESCE(SUM(quantity * unit_price + row_vat), 0) 
            FROM invoices i INNER JOIN invoice_details i_d ON i.invoice_id = i_d.invoice_id 
            WHERE 
                EXTRACT (YEAR FROM invoice_date) = p_m_s.year AND
                EXTRACT (MONTH FROM invoice_date) = p_m_s.month AND
                product_id = p_m_s.product_id) AS sales_checked
    FROM product_monthly_stats p_m_s)
SELECT c_p_m_s.*, 
  CASE WHEN sales <> sales_checked 
    THEN 'Problem!' ELSE ' ' END AS Problems
FROM check_p_m_s c_p_m_s   
ORDER BY 1, 2, 3;  



COMMIT ;



   
------------------------------------------------------------------------------------------
-- Tasks for DELETE trigger of table "receipt_details":
-- * update "amount_paid" in table "receipts"
-- * update "amount_received" in table "invoices"
-- * update "received_total" in table "months"
-- * update "current_balance" in table "customers"
-- * update "received" in table "customer_monthly_stats"

------------------------------------------------------------------------------------------
-- delete AFTER-ROW trigger for "receipt_details"  
--   will update the denormalized attributes/tables
CREATE OR REPLACE TRIGGER trg_receipt_details_del
	AFTER DELETE ON receipt_details FOR EACH ROW
BEGIN 

    -- decrease "amount_paid" in table "receipts"
    UPDATE receipts
    SET amount_paid = amount_paid - :OLD.amount
    WHERE receipt_id = :OLD.receipt_id  ;

    -- decrease "amount_received" in table "invoices"
    UPDATE invoices
    SET amount_received = amount_received - :OLD.amount
    WHERE invoice_id = :OLD.invoice_id  ;
    
    -- decrease "received_total" in table "months"
    UPDATE months
    SET received_total = received_total - :OLD.amount
	WHERE year = EXTRACT (YEAR FROM :OLD.receipt_date) AND
	        month = EXTRACT (MONTH FROM :OLD.receipt_date) ;  
    
    -- update "current_balance" in table "customers"
    /* there is no need, as the customer balance will be updated by the triggers of "invoices"
    UPDATE customers
    SET current_balance = current_balance + :OLD.amount
	WHERE cust_id = pac_sales_4.f_cust_id(:OLD.invoice_id) ;  
	*/

    -- update table "customer_monthly_stats"
	UPDATE customer_monthly_stats
	SET received = received - :OLD.amount
	WHERE year = EXTRACT (YEAR FROM :OLD.receipt_date) AND
	    month = EXTRACT (MONTH FROM :OLD.receipt_date) AND
	        cust_id =  pac_sales_4.f_cust_id(:OLD.invoice_id) ;       
END ;
/

----------------------------------------------------------------------------------------
--                      test the trigger for delete
----------------------------------------------------------------------------------------

-- SELECT * FROM receipt_details ORDER BY 1, 2

SELECT * FROM receipt_details WHERE receipt_id = 6 ORDER BY 1, 2 ;

/*
RECEIPT_ID RECEIPT_DATE INVOICE_ID     AMOUNT
---------- ------------ ---------- ----------
         6 18-08-2013           15     131040
         6 18-08-2013            3     109200
*/

SELECT * FROM receipts WHERE receipt_id = 6  ;
/*
RECEIPT_ID RECEIPT_DATE RECEIPT_DOCUM_TYPE        RECEIPT_DOCUM_NUMBER      RECEIPT_DOCUM_DATE    AMOUNT_PAID
---------- ------------ ------------------------- ------------------------- ------------------ --------------
         6 18-08-2013   OP                        666                       15-08-2013                 240240
*/


SELECT invoice_id, invoice_date, cust_id, invoice_amount, amount_received, n_of_rows
FROM invoices WHERE invoice_id IN (15, 3) ;
/*
INVOICE_ID INVOICE_DATE    CUST_ID INVOICE_AMOUNT AMOUNT_RECEIVE  N_OF_ROWS
---------- ------------ ---------- -------------- -------------- ----------
         3 01-08-2013         1001         109200         109200          1
        15 14-08-2013         1001         131040         131040          1
*/ 


SELECT cust_id, cust_name, current_balance FROM customers WHERE cust_id = 1001  ;
/*
   CUST_ID CUST_NAME                                          CURRENT_BALANC
---------- -------------------------------------------------- --------------
      1001 Client A SRL                                             22166044
*/

SELECT * FROM months WHERE year = 2013 AND month = 8  ;
/*
      YEAR      MONTH      SALES_TOTAL   REFUSALS_TOTAL CANCELLATIONS_TO RECEIVED_TOTAL
---------- ---------- ---------------- ---------------- ---------------- --------------
      2013          8         40030766                0                0       22773544
*/

SELECT * FROM customer_monthly_stats WHERE year = 2013 AND month = 8
  AND cust_id = 1001 ;
/*  
   CUST_ID       YEAR      MONTH      SALES   REFUSALS    CANCELLATIONS   RECEIVED
---------- ---------- ---------- ---------- ---------- ---------------- ----------
      1001       2013          8   11247432          0                0   10355920
*/



--------------------------------
--  we'll delete in "receipt_details" the row corresponding to receipt 6 and invoice 15 
DELETE receipt_details WHERE receipt_id = 6 AND invoice_id = 15 ;


--  check if update were properly done by the trigger



SELECT * FROM receipt_details WHERE receipt_id = 6 ORDER BY 1, 2 ;
/*
RECEIPT_ID RECEIPT_DATE INVOICE_ID     AMOUNT
---------- ------------ ---------- ----------
         6 18-08-2013            3     109200
*/

SELECT * FROM receipts WHERE receipt_id = 6  ;
/*
RECEIPT_ID RECEIPT_DATE RECEIPT_DOCUM_TYPE        RECEIPT_DOCUM_NUMBER      RECEIPT_DOCUM_DATE    AMOUNT_PAID
---------- ------------ ------------------------- ------------------------- ------------------ --------------
         6 18-08-2013   OP                        666                       15-08-2013                 109200
*/


SELECT invoice_id, invoice_date, cust_id, invoice_amount, amount_received, n_of_rows
FROM invoices WHERE invoice_id IN (15, 3) ;
/*
INVOICE_ID INVOICE_DATE    CUST_ID INVOICE_AMOUNT AMOUNT_RECEIVE  N_OF_ROWS
---------- ------------ ---------- -------------- -------------- ----------
         3 01-08-2013         1001         109200         109200          1
        15 14-08-2013         1001         131040              0          1
*/ 


SELECT cust_id, cust_name, current_balance FROM customers WHERE cust_id = 1001  ;
/*
   CUST_ID CUST_NAME                                          CURRENT_BALANC
---------- -------------------------------------------------- --------------
      1001 Client A SRL                                             22297084
*/

SELECT * FROM months WHERE year = 2013 AND month = 8  ;
/*
      YEAR      MONTH      SALES_TOTAL   REFUSALS_TOTAL CANCELLATIONS_TO RECEIVED_TOTAL
---------- ---------- ---------------- ---------------- ---------------- --------------
      2013          8         40030766                0                0       22642504
*/

SELECT * FROM customer_monthly_stats WHERE year = 2013 AND month = 8
  AND cust_id = 1001 ;
/*  
   CUST_ID       YEAR      MONTH      SALES   REFUSALS    CANCELLATIONS   RECEIVED
---------- ---------- ---------- ---------- ---------- ---------------- ----------
      1001       2013          8   11247432          0                0   10224880
*/


----------------------------------------------------------------------------------------
--              check the triggers with a couple of queries
----------------------------------------------------------------------------------------

-- check synchronization "invoices"-"invoice_details"-"receipt_details"
WITH check_invoices AS
    (SELECT i.invoice_id, i.invoice_number, i.invoice_date, i.invoice_amount, 
        (SELECT COALESCE(SUM(quantity * unit_price + row_vat), 0) 
            FROM invoice_details WHERE invoice_id = i.invoice_id) AS checked_amount ,
        i.amount_received, 
        (SELECT COALESCE(SUM(amount), 0) 
            FROM receipt_details WHERE invoice_id = i.invoice_id) AS checked_received
    FROM invoices i    )
SELECT c_i.*, 
  CASE WHEN invoice_amount <> checked_amount OR amount_received <> checked_received 
    THEN 'Problem!' ELSE ' ' END AS Problems
FROM check_invoices c_i   
ORDER BY 1 ;
         
-- check if the current balance account for each customer is correct
WITH check_cust AS (
    SELECT c.cust_id, cust_name, current_balance, 
        (SELECT COALESCE(SUM(invoice_amount),0) AS sales FROM invoices WHERE cust_id = c.cust_id) AS sales,
        (SELECT COALESCE(SUM(amount),0) FROM receipt_details rd INNER JOIN
                        invoices i ON rd.invoice_id = i.invoice_id   
                WHERE cust_id = c.cust_id) AS paid,
    (SELECT COALESCE(SUM(invoice_amount),0) AS sales FROM invoices WHERE cust_id = c.cust_id) -
        (SELECT COALESCE(SUM(amount),0) FROM receipt_details rd INNER JOIN
                        invoices i ON rd.invoice_id = i.invoice_id   
                WHERE cust_id = c.cust_id) AS diff
    FROM customers c) 
SELECT c_c.*, 
  CASE WHEN current_balance <> diff
    THEN 'Problem!' ELSE ' ' END AS Problems
FROM check_cust c_c   
ORDER BY 1 ;


-- check the values in table "months"
WITH check_months AS (
    SELECT m.year, m.month, sales_total, 
        (SELECT COALESCE(SUM(invoice_amount),0) 
        FROM invoices 
        WHERE EXTRACT (YEAR FROM invoice_date) = m.year AND
            EXTRACT (MONTH FROM invoice_date) = m.month) AS sales_checked,
        received_total,
        (SELECT COALESCE(SUM(amount),0) FROM receipt_details 
        WHERE EXTRACT (YEAR FROM receipt_date) = m.year AND
            EXTRACT (MONTH FROM receipt_date) = m.month) AS received_checked
    FROM months m)
SELECT c_m.*, 
  CASE WHEN sales_total <> sales_checked OR received_total <> received_checked 
    THEN 'Problem!' ELSE ' ' END AS Problems
FROM check_months c_m 
ORDER BY 1, 2, 3;  
     

-- check the values in table "customer_monthly_stats"
WITH check_c_m_s AS (
    SELECT c_m_s.year, c_m_s.month, cust_id, sales, 
        (SELECT COALESCE(SUM(invoice_amount),0) 
        FROM invoices 
        WHERE EXTRACT (YEAR FROM invoice_date) = c_m_s.year AND
            EXTRACT (MONTH FROM invoice_date) = c_m_s.month AND
            cust_id = c_m_s.cust_id) AS sales_checked,
        received,
        (SELECT COALESCE(SUM(amount),0) FROM receipt_details r_d
            INNER JOIN invoices i ON r_d.invoice_id = i.invoice_id
        WHERE EXTRACT (YEAR FROM receipt_date) = c_m_s.year AND
            EXTRACT (MONTH FROM receipt_date) = c_m_s.month AND
            cust_id = c_m_s.cust_id) AS received_checked
    FROM customer_monthly_stats c_m_s)
SELECT c_c_m_s.*, 
  CASE WHEN sales <> sales_checked OR received <> received_checked 
    THEN 'Problem!' ELSE ' ' END AS Problems
FROM check_c_m_s c_c_m_s  
ORDER BY 1, 2, 3 ;
     

-- check the values in table "product_monthly_stats"
WITH check_p_m_s AS (
    SELECT p_m_s.year, p_m_s.month, product_id, sales, 
        (SELECT COALESCE(SUM(quantity * unit_price + row_vat), 0) 
            FROM invoices i INNER JOIN invoice_details i_d ON i.invoice_id = i_d.invoice_id 
            WHERE 
                EXTRACT (YEAR FROM invoice_date) = p_m_s.year AND
                EXTRACT (MONTH FROM invoice_date) = p_m_s.month AND
                product_id = p_m_s.product_id) AS sales_checked
    FROM product_monthly_stats p_m_s)
SELECT c_p_m_s.*, 
  CASE WHEN sales <> sales_checked 
    THEN 'Problem!' ELSE ' ' END AS Problems
FROM check_p_m_s c_p_m_s   
ORDER BY 1, 2, 3;  



-- now, we can commit the changes
COMMIT ;


------------------------------------------------------------------------------------------
-- Tasks for UPDATE trigger of table "receipt_details":
-- * import "receipt_date" from "receipts" (BEFORE-ROW)
-- * update "amount_paid" in table "receipts"
-- * update "amount_received" in table "invoices"
-- * update "received_total" in table "months"
-- * update "current_balance" in table "customers"
-- * update "received" in table "customer_monthly_stats"

------------------------------------------------------------------------------------------
--  trigger BEFORE-ROW trigger for UPDATE in table "receipt_details" will just 
--   import "receipt_date" from "receipts"
CREATE OR REPLACE TRIGGER trg_receipt_details_upd1
	BEFORE UPDATE ON receipt_details FOR EACH ROW
BEGIN 
    :NEW.receipt_date := pac_sales_4.f_receipt_date(:NEW.receipt_id) ;
END ;
/


------------------------------------------------------------------------------------------
-- update AFTER-ROW trigger for "receipt_details"  
--   will update the denormalized attributes/tables
CREATE OR REPLACE TRIGGER trg_receipt_details_upd2
	AFTER UPDATE ON receipt_details FOR EACH ROW
BEGIN 
    
    -- if only "amount" changed...
    IF :NEW.receipt_id = :OLD.receipt_id AND :NEW.invoice_id = :OLD.invoice_id 
            AND :NEW.amount <> :OLD.amount THEN
        
        -- we'll update amount paid for current receipt and invoice in tables
        --  "receipts", "invoices", "customers", "months" and "customer_monthly_stats"  
        UPDATE receipts
        SET amount_paid = amount_paid - :OLD.amount + :NEW.amount
        WHERE receipt_id = :NEW.receipt_id  ;
        
        UPDATE invoices
        SET amount_received = amount_received - :OLD.amount + :NEW.amount
        WHERE invoice_id = :NEW.invoice_id  ;
    
        /* there is no need, as the customer balance will be updated by the triggers of "invoices"
        UPDATE customers
        SET current_balance = current_balance + :OLD.amount - :NEW.amount
	    WHERE cust_id = pac_sales_4.f_cust_id(:NEW.invoice_id) ;  
	    */

        UPDATE months
        SET received_total = received_total - :OLD.amount  + :NEW.amount
	    WHERE year = EXTRACT (YEAR FROM :NEW.receipt_date) AND
	        month = EXTRACT (MONTH FROM :NEW.receipt_date) ; 
	    
	    UPDATE customer_monthly_stats
	    SET received = received - :OLD.amount + :NEW.amount
	    WHERE year = EXTRACT (YEAR FROM :NEW.receipt_date) AND
	        month = EXTRACT (MONTH FROM :NEW.receipt_date) AND
	        cust_id =  pac_sales_4.f_cust_id(:NEW.invoice_id) ;       
     
    ELSE
        -- at least "receipt_id" or "invoice_id" was changed, so there is more to be done
        
        -- decrease "amount_paid" in table "receipts" for the old "receipt_id"
        UPDATE receipts
        SET amount_paid = amount_paid - :OLD.amount
        WHERE receipt_id = :OLD.receipt_id  ;
 
        -- increase "amount_paid" in table "receipts" for the new "receipt_id"
        UPDATE receipts
        SET amount_paid = amount_paid + :NEW.amount
        WHERE receipt_id = :NEW.receipt_id  ;
     
        -- decrease "amount_received" in table "invoices" for the old "invoice_id"              
        UPDATE invoices
        SET amount_received = amount_received - :OLD.amount
        WHERE invoice_id = :OLD.invoice_id  ;

        -- increase "amount_received" in table "invoices" for the new "invoice_id"              
        UPDATE invoices
        SET amount_received = amount_received + :NEW.amount
        WHERE invoice_id = :NEW.invoice_id  ;

        -- change "current_balance" for the old and the new customer
        /* there is no need, as the customer balance will be updated by the triggers of "invoices"

        UPDATE customers
        SET current_balance = current_balance + :OLD.amount
	    WHERE cust_id = pac_sales_4.f_cust_id(:OLD.invoice_id) ;
	      
        UPDATE customers
        SET current_balance = current_balance - :NEW.amount
	    WHERE cust_id = pac_sales_4.f_cust_id(:NEW.invoice_id) ;  
        */
        
        -- update "months"...
        UPDATE months
        SET received_total = received_total - :OLD.amount
        WHERE year = EXTRACT(YEAR FROM :OLD.receipt_date) 
            AND month =  EXTRACT(MONTH FROM :OLD.receipt_date) ;

        IF pac_sales_2.f_months (EXTRACT (YEAR FROM :NEW.receipt_date), 
	            EXTRACT (MONTH FROM :NEW.receipt_date)) = FALSE THEN
	        INSERT INTO months VALUES (EXTRACT (YEAR FROM :NEW.receipt_date), 
	                EXTRACT (MONTH FROM :NEW.receipt_date), 0, 0, 0, :NEW.amount) ;
        ELSE 	        
            UPDATE months
            SET received_total = received_total + :NEW.amount
            WHERE year = EXTRACT(YEAR FROM :NEW.receipt_date) 
                    AND month =  EXTRACT(MONTH FROM :NEW.receipt_date) ;
        END IF ;	

         
        -- update "customer_monthly_stats"
    	UPDATE customer_monthly_stats
	    SET received = received - :OLD.amount
	    WHERE year = EXTRACT (YEAR FROM :OLD.receipt_date) AND
	        month = EXTRACT (MONTH FROM :OLD.receipt_date) AND
	            cust_id =  pac_sales_4.f_cust_id(:OLD.invoice_id) ;       

	    IF pac_sales_2.f_customer_monthly_stats (pac_sales_4.f_cust_id(:NEW.invoice_id), 
	            EXTRACT (YEAR FROM :NEW.receipt_date), 
 	            EXTRACT (MONTH FROM :NEW.receipt_date)) = FALSE THEN

	        INSERT INTO customer_monthly_stats VALUES (pac_sales_4.f_cust_id(:NEW.invoice_id), 
	            EXTRACT (YEAR FROM :NEW.receipt_date), 
	            EXTRACT (MONTH FROM :NEW.receipt_date),
	            0, 0, 0, :NEW.amount) ;
	    ELSE
	        UPDATE customer_monthly_stats
	        SET received = received + :NEW.amount
	        WHERE year = EXTRACT (YEAR FROM :NEW.receipt_date) AND
	            month = EXTRACT (MONTH FROM :NEW.receipt_date) AND
	            cust_id =  pac_sales_4.f_cust_id(:NEW.invoice_id) ;       
 	    END IF ;	

	END IF ;                   
               
END ;
/

----------------------------------------------------------------------------------------
--                           to be tested during lectures 
----------------------------------------------------------------------------------------



